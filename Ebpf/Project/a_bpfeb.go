// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadA returns the embedded CollectionSpec for a.
func loadA() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ABytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load a: %w", err)
	}

	return spec, err
}

// loadAObjects loads a and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*aObjects
//	*aPrograms
//	*aMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadAObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadA()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// aSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type aSpecs struct {
	aProgramSpecs
	aMapSpecs
	aVariableSpecs
}

// aProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type aProgramSpecs struct {
	HandleTp *ebpf.ProgramSpec `ebpf:"handle_tp"`
}

// aMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type aMapSpecs struct {
}

// aVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type aVariableSpecs struct {
	PidFilter *ebpf.VariableSpec `ebpf:"pid_filter"`
}

// aObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadAObjects or ebpf.CollectionSpec.LoadAndAssign.
type aObjects struct {
	aPrograms
	aMaps
	aVariables
}

func (o *aObjects) Close() error {
	return _AClose(
		&o.aPrograms,
		&o.aMaps,
	)
}

// aMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadAObjects or ebpf.CollectionSpec.LoadAndAssign.
type aMaps struct {
}

func (m *aMaps) Close() error {
	return _AClose()
}

// aVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadAObjects or ebpf.CollectionSpec.LoadAndAssign.
type aVariables struct {
	PidFilter *ebpf.Variable `ebpf:"pid_filter"`
}

// aPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadAObjects or ebpf.CollectionSpec.LoadAndAssign.
type aPrograms struct {
	HandleTp *ebpf.Program `ebpf:"handle_tp"`
}

func (p *aPrograms) Close() error {
	return _AClose(
		p.HandleTp,
	)
}

func _AClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed a_bpfeb.o
var _ABytes []byte
